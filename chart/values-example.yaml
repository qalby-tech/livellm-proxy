# Example values file for qalby-proxy chart
# Copy this file to values.yaml and customize as needed

# Number of replicas
replicaCount: 2

# Container image configuration
image:
  repository: your-registry/qalby-proxy
  pullPolicy: IfNotPresent
  tag: "latest"

# Image pull secrets for private registries
imagePullSecrets:
  - name: my-registry-secret

# Override chart names if needed
nameOverride: ""
fullnameOverride: ""

# Environment variables configuration
env:
  # Logfire configuration - replace with your actual token
  logfire_token: "your-logfire-token-here"
  otel_exporter_otlp_endpoint: "https://api.logfire.pydantic.dev/otlp"
  
  # Application configuration
  host: "0.0.0.0"
  port: "8000"
  
  # Custom environment variables
  custom:
    # Add any additional environment variables here
    # EXAMPLE_API_KEY: "your-api-key"
    # DEBUG: "true"
    # DATABASE_URL: "postgresql://user:pass@host:port/db"

# Service account configuration
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod annotations and labels
podAnnotations:
  # Example annotations
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "8000"

podLabels:
  # Example labels
  # app.kubernetes.io/component: "api"
  # version: "v1.0.0"

# Pod security context
podSecurityContext:
  fsGroup: 2000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 8000

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: qalby-proxy.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: qalby-proxy-tls
      hosts:
        - qalby-proxy.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Health check probes
livenessProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Additional volumes (if needed)
volumes: []
# Example:
# - name: config-volume
#   configMap:
#     name: app-config

# Additional volume mounts (if needed)
volumeMounts: []
# Example:
# - name: config-volume
#   mountPath: "/app/config"
#   readOnly: true

# Node selection - Example configurations

# Option 1: Simple node selector
nodeSelector:
  kubernetes.io/os: linux
  # node-type: worker

# Option 2: Advanced node affinity
# nodeSelector: {}
# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: node-type
#           operator: In
#           values:
#           - worker
#           - api
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       preference:
#         matchExpressions:
#         - key: node-zone
#           operator: In
#           values:
#           - zone-a

# Option 3: Pod anti-affinity to spread across nodes
# affinity:
#   podAntiAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       podAffinityTerm:
#         labelSelector:
#           matchExpressions:
#           - key: app.kubernetes.io/name
#             operator: In
#             values:
#             - qalby-proxy
#         topologyKey: kubernetes.io/hostname

# Tolerations for tainted nodes
tolerations: []
# Example:
# - key: "dedicated"
#   operator: "Equal"
#   value: "api"
#   effect: "NoSchedule"

# Additional affinity rules
affinity: {}
